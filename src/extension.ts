// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';

// Minimal Git types for the built-in Git extension API we consume
interface GitExtension {
	getAPI(version: number): GitAPI;
}

interface GitAPI {
	repositories: Array<{ inputBox: { value: string }; rootUri: vscode.Uri }>;
}

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "autocommiter" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	const helloDisposable = vscode.commands.registerCommand('autocommiter.helloWorld', () => {
		vscode.window.showInformationMessage('Hello World from autocommiter!');
	});

	context.subscriptions.push(helloDisposable);

	// Generate commit message command (prototype)
	const generateDisposable = vscode.commands.registerCommand('autocommiter.generateMessage', async () => {
		vscode.window.withProgress({ location: vscode.ProgressLocation.Notification, title: 'Generating commit messageâ€¦' }, async () => {
			try {
				const gitExt = vscode.extensions.getExtension<GitExtension>('vscode.git')?.exports;
				let message = '';

				if (gitExt) {
					const api = gitExt.getAPI(1);
					const repo = api.repositories[0];
					if (repo) {
						// Attempt to use inputBox existing value and repository root
						const current = repo.inputBox.value || '';
						const root = repo.rootUri ? repo.rootUri.fsPath : undefined;
						// Lightweight heuristic: summarize changed files from inputBox or ask Git for staged/changed files later
						message = await generateMessageFromContext(current, root);
						// Set the commit input box value
						repo.inputBox.value = message;
						vscode.window.showInformationMessage('Autocommiter inserted a generated commit message.');
						return;
					}
				}

				// Fallback: insert into the currently focused SCM input (if any) or into clipboard
				message = await generateMessageFromContext('', undefined);
				// Try to set the active scm input via commands
				try {
					await vscode.commands.executeCommand('git.inputBox.setValue', message);
					vscode.window.showInformationMessage('Autocommiter inserted a generated commit message.');
				} catch {
					// fallback to clipboard and show message
					await vscode.env.clipboard.writeText(message);
					vscode.window.showInformationMessage('Generated commit message copied to clipboard. Paste it into your commit box.');
				}
			} catch (err) {
				console.error('autocommiter generate error', err);
				vscode.window.showErrorMessage('Autocommiter failed to generate a message. See console for details.');
			}
		});
	});

	context.subscriptions.push(generateDisposable);

	// Status bar item (wand emoji) placed near the right
	const status = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	status.text = 'ðŸª„ Generate commit';
	status.command = 'autocommiter.generateMessage';
	status.tooltip = 'Generate a commit message using Autocommiter';
	status.show();
	context.subscriptions.push(status);
}

// This method is called when your extension is deactivated
export function deactivate() {}

// Very small heuristic generator â€” placeholder for integrating with GitHub/Copilot APIs.
async function generateMessageFromContext(currentInput: string, repoRoot?: string): Promise<string> {
	// If user already typed something, prefer to augment it
	if (currentInput && currentInput.trim().length > 0) {
		return `${currentInput.trim()} â€” (enhanced by Autocommiter)`;
	}

	// Otherwise craft a short, generic message. In future this should inspect staged changes or call GitHub/Copilot.
	return 'chore: automated commit generated by Autocommiter';
}
